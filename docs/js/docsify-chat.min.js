!(function () {
  "use strict";
  !(function (n) {
    if (!n || "undefined" == typeof window) return;
    const e = document.createElement("style");
    e.setAttribute("type", "text/css"),
      (e.innerHTML = n),
      document.head.appendChild(e);
  })(
    ".chat-panel {\n  position: relative;\n  border-radius: 0.5rem;\n  margin: 1rem auto;\n  padding: 0.3rem 0;\n  background-color: rgb(246, 248, 250);\n  overflow: hidden;\n}\n.chat-panel .controls {\n  display: initial;\n  width: 100%;\n  padding: 0.5rem;\n}\n.chat-panel .controls .circle {\n  display: inline-block;\n  margin: 0.5rem 0rem 0.5rem 0.2rem;\n  width: 0.8rem;\n  height: 0.8rem;\n  border-radius: 50%;\n}\n.chat-panel .controls .red {\n  background-color: #ff5f56;\n}\n.chat-panel .controls .yellow {\n  background-color: #ffbd2e;\n}\n.chat-panel .controls .green {\n  background-color: #27c93f;\n}\n.chat-panel .controls .title {\n  position: absolute;\n  text-align: center;\n  width: 100%;\n  font-size: 0.8rem;\n  line-height: 1rem;\n  top: 0.8rem;\n}\n.chat-panel .chat-content {\n  padding: 0 1rem;\n}\n.chat-panel .chat-message {\n  position: relative;\n  margin: 1rem 0;\n  opacity: 0;\n  transform: translate(-10%);\n  transition: transform 0.4s ease-out, opacity 0.4s ease-in;\n}\n.chat-panel .chat-message.myself {\n  text-align: right;\n  transform: translate(10%);\n}\n.chat-panel .chat-message.myself .message-box {\n  margin-left: 0;\n  margin-right: 0.5rem;\n}\n.chat-panel .chat-message.myself .nickname {\n  text-align: right;\n}\n.chat-panel .chat-message.show {\n  opacity: 1;\n  transform: translate(0);\n}\n.chat-panel .chat-message .avatar {\n  width: 2.5rem;\n  height: 2.5rem;\n  overflow: hidden;\n  border-radius: 50%;\n  line-height: 2.5rem;\n  color: #fff;\n  text-align: center;\n  display: inline-block;\n}\n.chat-panel .chat-message .avatar img {\n  display: inline-flex;\n  line-height: 0;\n  justify-content: center;\n  align-items: center;\n  color: #fff;\n}\n.chat-panel .chat-message .message-box {\n  display: inline-block;\n  margin-left: 0.5rem;\n  max-width: 90%;\n  vertical-align: top;\n}\n.chat-panel .chat-message .message-box .nickname {\n  font-size: 0.8rem;\n  color: gray;\n}\n.chat-panel .chat-message .message-box .message {\n  position: relative;\n  font-size: 0.9rem;\n  border-radius: 0.5rem;\n  background-color: #fff;\n  word-break: break-all;\n  padding: 0.6rem 0.7rem;\n  margin-top: 0.2rem;\n  box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0.05) 0px 1px 2px 0px;\n}"
  );
  const n = "chat-panel",
    e = "controls",
    a = "chat-message",
    t = {
      chatPanelMarkup:
        /[\r\n]*(\s*)(<!-+\s+chat:\s*?start\s+-+>)[\r\n]+([\s|\S]*?)[\r\n\s]+(<!-+\s+chat:\s*?end\s+-+>)/m,
      panelTitleMarkup: /[\r\n]*(\s*)<!-+\s+title:\s*(.*)\s+-+>/m,
      chatCommentMarkup:
        /[\r\n]*(\s*)#{1,6}\s*[*_]{2}\s*(.*[^\s])\s*[*_]{2}[\r\n]+([\s\S]*?)(?=#{1,6}\s*[*_]{2}|<!-+\s+chat:\s*?end\s+-+>)/,
    },
    s = { title: "聊天记录", users: [], myself: null, animation: 50 };
  function r(n) {
    return `<div class="avatar" style="background-color: ${(function (n) {
      let e = 0,
        a = "#";
      for (let a = 0; a < n.length; a++) e = n.charCodeAt(a) + ((e << 5) - e);
      for (let n = 0; n < 3; n++)
        a += ("00" + ((e >> (8 * n)) & 255).toString(16)).substr(-2);
      return a;
    })(n)};">${n.substring(0, 1)}</div>`;
  }
  window &&
    ((window.$docsify = window.$docsify ?? {}),
    (window.$docsify.chat = window.$docsify.chat ?? {}),
    Object.keys(window.$docsify.chat).forEach((n) => {
      Object.prototype.hasOwnProperty.call(s, n) &&
        (s[n] = window.$docsify.chat[n]);
    }),
    (window.$docsify.chat.version = "0.1.5"),
    (window.$docsify.plugins = [].concat(function (i, c) {
      let o = !1;
      i.beforeEach(
        (a) => (
          (o = t.chatPanelMarkup.test(a)),
          o &&
            (a = (function (a, i) {
              let c, o;
              for (; (c = t.chatPanelMarkup.exec(a)); ) {
                let i = c[0],
                  l = s.title,
                  d = "",
                  m = "";
                const h = t.panelTitleMarkup.test(i),
                  p = t.chatCommentMarkup.test(i),
                  g = c[2],
                  f = c[4];
                h &&
                  ((l = t.panelTitleMarkup.exec(i)[2]),
                  (i = i.replace(t.panelTitleMarkup, "")));
                const u = `\n      <div class="${e}">\n        <div class="circle red"></div>\n        <div class="circle yellow"></div>\n        <div class="circle green"></div>\n        <div class="title">${l}</div>\n      </div>\n    `;
                if (p)
                  for (
                    d = `<div class="${n}">${u}`, m = "</div>";
                    (o = t.chatCommentMarkup.exec(i));

                  ) {
                    const n = o[2],
                      e = o[3].trim(),
                      a = s.users.filter((e) => e.nickname === n)[0] ?? {},
                      t = s.myself === n,
                      c = a.avatar
                        ? `<div class="avatar"><img src="${a.avatar}"></div>`
                        : r(n),
                      l = t ? ["$2", "$1"] : ["$1", "$2"],
                      d =
                        `\n          <div class="chat-content">\n            <div class="chat-message ${
                          t ? "myself" : ""
                        }">\n              $1\n              <div class="message-box">\n                <div class="nickname">${n}</div>\n                <div class="message">${e}</div>\n              </div>\n              $2\n            </div>\n          </div>\n        `
                          .replace(l[0], c)
                          .replace(l[1], "");
                    i = i.replace(o[0], d);
                  }
                (i = i.replace(g, d)),
                  (i = i.replace(f, m)),
                  (a = a.replace(c[0], i));
              }
              return a;
            })(a)),
          a
        )
      ),
        i.doneEach(() => {
          const e = document.getElementsByClassName(n),
            t = new IntersectionObserver((n) => {
              n.forEach((n) => {
                const e = n.target.getElementsByClassName(a);
                for (let a = 0; a < e.length; a++) {
                  const t = e[a];
                  n.isIntersecting
                    ? setTimeout(() => t.classList.add("show"), a * s.animation)
                    : t.classList.remove("show");
                }
              });
            });
          for (const n of e) t.observe(n);
        });
    }, window.$docsify.plugins ?? [])));
})();
